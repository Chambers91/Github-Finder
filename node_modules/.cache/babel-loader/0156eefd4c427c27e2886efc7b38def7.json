{"ast":null,"code":"import _slicedToArray from \"/Users/BossmanChambers/Desktop/github-finder/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/BossmanChambers/Desktop/github-finder/src/components/users/Search.js\";\nimport PropTypes from 'prop-types';\nimport React, { useState } from 'react';\n\nconst Search = ({\n  searchUsers,\n  showClear,\n  clearUsers,\n  setAlert\n}) => {\n  const _useState = useState(' '),\n        _useState2 = _slicedToArray(_useState, 2),\n        text = _useState2[0],\n        setText = _useState2[1];\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    if (text === ' ') {\n      setAlert('Please enter something ', 'light');\n    } else {\n      searchUsers(this.state.text);\n      setText({\n        text: ' '\n      });\n    }\n  };\n\n  const onChange = e => setText(e.target.value);\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: this.onSubmit,\n    className: \"form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    name: \"text\",\n    placeholder: \"Search Users...\",\n    value: text,\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Search\",\n    className: \"btn btn-dark btn-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  })), showClear && React.createElement(\"button\", {\n    className: \"btn btn-light btn-block\",\n    onClick: clearUsers,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"Clear\"));\n};\n\nSearch.props = {\n  searchUsers: PropTypes.func.isRequired,\n  clearUsers: PropTypes.func.isRequired,\n  showClear: PropTypes.bool.isRequired,\n  setAlert: PropTypes.func.isRequired\n};\nexport default Search;","map":{"version":3,"sources":["/Users/BossmanChambers/Desktop/github-finder/src/components/users/Search.js"],"names":["PropTypes","React","useState","Search","searchUsers","showClear","clearUsers","setAlert","text","setText","onSubmit","e","preventDefault","state","onChange","target","value","props","func","isRequired","bool"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,SAAf;AAA0BC,EAAAA,UAA1B;AAAsCC,EAAAA;AAAtC,CAAD,KAAsD;AAAA,oBAC3CL,QAAQ,CAAC,GAAD,CADmC;AAAA;AAAA,QAC5DM,IAD4D;AAAA,QACtDC,OADsD;;AAGnE,QAAMC,QAAQ,GAAGC,CAAC,IAAI;AACpBA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAIJ,IAAI,KAAK,GAAb,EAAkB;AAChBD,MAAAA,QAAQ,CAAC,yBAAD,EAA4B,OAA5B,CAAR;AACD,KAFD,MAEO;AACLH,MAAAA,WAAW,CAAC,KAAKS,KAAL,CAAWL,IAAZ,CAAX;AACAC,MAAAA,OAAO,CAAC;AAAED,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAP;AACD;AACF,GARD;;AASA,QAAMM,QAAQ,GAAGH,CAAC,IAAIF,OAAO,CAACE,CAAC,CAACI,MAAF,CAASC,KAAV,CAA7B;;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,QAAQ,EAAE,KAAKN,QAArB;AAA+B,IAAA,SAAS,EAAC,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,WAAW,EAAC,iBAHd;AAIE,IAAA,KAAK,EAAEF,IAJT;AAKE,IAAA,QAAQ,EAAEM,QALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAQE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,KAAK,EAAC,QAFR;AAGE,IAAA,SAAS,EAAC,wBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CADF,EAeGT,SAAS,IACR;AAAQ,IAAA,SAAS,EAAC,yBAAlB;AAA4C,IAAA,OAAO,EAAEC,UAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAhBJ,CADF;AAuBD,CArCD;;AAuCAH,MAAM,CAACc,KAAP,GAAe;AACbb,EAAAA,WAAW,EAAEJ,SAAS,CAACkB,IAAV,CAAeC,UADf;AAEbb,EAAAA,UAAU,EAAEN,SAAS,CAACkB,IAAV,CAAeC,UAFd;AAGbd,EAAAA,SAAS,EAAEL,SAAS,CAACoB,IAAV,CAAeD,UAHb;AAIbZ,EAAAA,QAAQ,EAAEP,SAAS,CAACkB,IAAV,CAAeC;AAJZ,CAAf;AAOA,eAAehB,MAAf","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useState } from 'react';\n\nconst Search = ({ searchUsers, showClear, clearUsers, setAlert }) => {\n  const [text, setText] = useState(' ');\n\n  const onSubmit = e => {\n    e.preventDefault();\n    if (text === ' ') {\n      setAlert('Please enter something ', 'light');\n    } else {\n      searchUsers(this.state.text);\n      setText({ text: ' ' });\n    }\n  };\n  const onChange = e => setText(e.target.value);\n\n  return (\n    <div>\n      <form onSubmit={this.onSubmit} className='form'>\n        <input\n          type='text'\n          name='text'\n          placeholder='Search Users...'\n          value={text}\n          onChange={onChange}\n        />\n        <input\n          type='submit'\n          value='Search'\n          className='btn btn-dark btn-block'\n        />\n      </form>\n      {showClear && (\n        <button className='btn btn-light btn-block' onClick={clearUsers}>\n          Clear\n        </button>\n      )}\n    </div>\n  );\n};\n\nSearch.props = {\n  searchUsers: PropTypes.func.isRequired,\n  clearUsers: PropTypes.func.isRequired,\n  showClear: PropTypes.bool.isRequired,\n  setAlert: PropTypes.func.isRequired\n};\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}